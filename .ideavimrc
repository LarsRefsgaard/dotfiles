"" .ideavimrc - Matt Chapman


"" Base Settings
"" ========================================================

set scrolloff=10
" set linenumber
set showmode
set showcmd

set smartcase
set incsearch
set hlsearch

set visualbell

" Use system clipboard
set clipboard+=unnamed

let mapleader = " "


"" Plugin Settings
"" ========================================================

Plug 'tpope/vim-surround'
set highlightedyank
"" set sneak
set nerdtree

"(somethign random with a surrounding)
" Easymotion settings
Plug 'easymotion/vim-easymotion'
set notimeout

" Which-key settings
set which-key
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"

let g:WhichKeyDesc_leader = "<leader> Leader key"

let g:WhichKeyDesc_leader = "<leader>x Open file explorer"

let g:WhichKeyDesc_easymotion = "<leader>j Jump with Easymotion"
let g:WhichKeyDesc_easymotion_prefix = "<leader><leader>"

let g:WhichKeyDesc_comment = "<leader>c Comment line"

let g:WhichKeyDesc_fold = "<leader>z Folding"
let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"

let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"


let g:WhichKeyDesc_display = "<leader>d Display options"
let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"

let g:WhichKeyDesc_action= "<leader>a Actions"
let g:WhichKeyDesc_action_context_menu = "<leader>am Open context menu"
let g:WhichKeyDesc_action_search = "<leader>as Open command modal"

let g:WhichKeyDesc_file_nav = "<leader>f File navigation"
let g:WhichKeyDesc_file_nav_goto_file = "<leader>ff Go to file"
let g:WhichKeyDesc_file_nav_goto_content = "<leader>fc Search for file content"
let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>fr Show recent files"
let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>fl Show recent locations"
let g:WhichKeyDesc_file_nav_new_file = "<leader>fs Create new file"

let g:WhichKeyDesc_close_tab = "<leader>q Close active tab"

let g:WhichKeyDesc_refactoring = "<leader>r Refactoring menu"
let g:WhichKeyDesc_refactoring_rename = "<leader>rn Rename element"
let g:WhichKeyDesc_refactoring_method = "<leader>rm Extract method"
let g:WhichKeyDesc_refactoring_variable = "<leader>rv Introduce variable"
let g:WhichKeyDesc_refactoring_field = "<leader>rf Introduce field"
let g:WhichKeyDesc_refactoring_signature = "<leader>rs Change signature"
let g:WhichKeyDesc_refactoring_all = "<leader>rr Open refactorings list"

let g:WhichKeyDesc_goto = "<leader>g Go to X"
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go to Definition"
let g:WhichKeyDesc_goto_type_declaration = "<leader>gy Go to Type Definition"
let g:WhichKeyDesc_goto_implementation = "<leader>gi Go to Implementation"
let g:WhichKeyDesc_goto_usages = "<leader>gu Go to Usages"
let g:WhichKeyDesc_goto_test = "<leader>gt Go to Test"
let g:WhichKeyDesc_goto_back = "<leader>gb Go Back"
let g:WhichKeyDesc_goto_forward = "<leader>gf Go Forward"

let g:WhichKeyDesc_git = "<leader>b Git operations"
let g:WhichKeyDesc_git_commit = "<leader>bc Open Git commit dialog"
let g:WhichKeyDesc_git_status = "<leader>bs Open Git status dialog"
let g:WhichKeyDesc_git_branches = "<leader>bb Open Git branches list"
let g:WhichKeyDesc_git_new_branch = "<leader>bn Make a new git branch"

let g:WhichKeyDesc_errors = "<leader>e Error navigation"
let g:WhichKeyDesc_errors_next = "<leader>en Go to next error in solution"
let g:WhichKeyDesc_errors_prev = "<leader>ep Go to previous error in solution"

let g:WhichKeyDesc_surround_change = "cs Change nearest surrounding"
let g:WhichKeyDesc_surround_delete = "ds Delete nearest surrounding"
let g:WhichKeyDesc_surround_add = "ys Add surrounding to motion"
let g:WhichKeyDesc_surround_yank = "yy Yank current line"

"" Key mappings
"" ========================================================

inoremap jk <Esc>

" Tab navigation
nnoremap <A-n> :tabnext<CR>
nnoremap <A-p> :tabprev<CR>

" Pane navigation
nnoremap <A-h> <C-w>h
nnoremap <A-l> <C-w>l
nnoremap <A-k> <C-w>k
nnoremap <A-j> <C-w>j

" Jump between methods
nmap [[ :action MethodUp<CR>
nmap ]] :action MethodDown<CR>

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv

" Execute macro saved in 'q' register
nnoremap qj @q

" Popup navigation
" imap <C-j> :Action PopupMenu-selectNext<CR>
" imap <C-k> :Action PopupMenu-selectPrev<CR>

"" Leader commands
"" ========================================================

" Comment lines
map <leader>c :action CommentByLineComment<CR>

" Jump around with easymotion
map <leader>j <Plug>(easymotion-s)

" Open NERDTree (use q to exit)
map <leader>x :NERDTreeToggle<CR>

" Folding
map <leader>zc <Action>(CollapseAllRegions)<CR>
map <leader>zo <Action>(ExpandAllRegions)<CR>

" Window splits
map <leader>wv <Action>(SplitVertically)<CR>
map <leader>ws <Action>(SplitHorizontally)<CR>
map <leader>wu <Action>(Unsplit)<CR>
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)<CR>

" Display options
map <leader>dd <Action>(ToggleDistractionFreeMode)<CR>
map <leader>dz <Action>(ToggleZenMode)<CR>
map <leader>df <Action>(ToggleFullScreen)<CR>

" Actions
map <leader>am <Action>(ShowIntentionActions)<CR>
map <leader>as <Action>(SearchEverywhere)<CR>
map <leader>aa <Action>(GotoAction)<CR>

" File navigation
map <leader>ff <Action>(GotoFile)<CR>
map <leader>fr <Action>(RecentFiles)<CR>
map <leader>fc <Action>(FindInPath)<CR>
map <leader>fl <Action>(RecentLocations)<CR>
map <leader>fs <Action>(NewScratchFile)<CR>
map <leader>fo <Action>(SelectInProjectView)<CR>

" Close active tab
map <leader>q <Action>(CloseContent)<CR>

" Refactoring
map <leader>rn <Action>(RenameElement)<CR>
map <leader>rm <Action>(ExtractMethod)<CR>
map <leader>rv <Action>(IntroduceVariable)<CR>
map <leader>rf <Action>(IntroduceField)<CR>
map <leader>rs <Action>(ChangeSignature)<CR>
map <leader>rr <Action>(Refactorings.QuickListPopupAction)<CR>

" Go to code
nmap <leader>gd <Action>(GotoDeclaration)<CR>
nmap <leader>gy <Action>(GotoTypeDeclaration)<CR>
nmap <leader>gi <Action>(GotoImplementation)<CR>
nmap <leader>gu <Action>(ShowUsages)<CR>
nmap <leader>gt <Action>(GotoTest)<CR>
nmap <leader>gf <Action>(Back)<CR>
nmap <leader>gb <Action>(Forward)<CR>

" Git windows
map <leader>bc <Action>(CheckinProject)<CR>
map <leader>bs <Action>(ActivateVersionControlToolWindow)<CR>
map <leader>bb <Action>(Git.Branches)<CR>
map <leader>bn <Action>(GitNewBranchAction)<CR>
map <leader>bh <Action>(Git.Stash)<CR>
map <leader>bo <Action>(GitCheckoutAction)<CR>
map <leader>bj <Action>(Annotate)<CR>

" Control windows
map <leader>ll <Action>(ActivateServicesToolWindow)<CR>
map <leader>l; <Action>(ActivateTerminalToolWindow)<CR>
map <leader>ld <Action>(ActivateDebugToolWindow)<CR>
map <leader>le <Action>(ActivateProblemsViewToolWindow)<CR>
map <leader>ly <Action>(Jdbc.OpenConsole.New.Generate)<CR>
map <leader>lf <Action>(ActivateDatabaseToolWindow)<CR>
map <leader>lq <Action>(HideActiveWindow)<CR>

" Debugging
map <leader>hr <Action>(Run)<CR>
map <leader>hh <Action>(Debug)<CR>
map <leader>hs <Action>(Stop)<CR>
map <leader>hu <Action>(UpdateRunningApplication)<CR>

" Errors
map <leader>en <Action>(ReSharperGotoNextErrorInSolution)<CR>
map <leader>ep <Action>(ReSharperGotoPrevErrorInSolution)<CR>